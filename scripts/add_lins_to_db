#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of GetTor, a Tor Browser distribution system.
#
# :authors: hiro <hiro@torproject.org>
#           see also AUTHORS file
#
# :license: This is Free Software. See LICENSE for license information.

import os
import sys
import sqlite3
import argparse
from urllib import request

def print_header():
    header = """
                             __     __
                            /\ \__ /\ \__
                  __      __\ \ ,_\\\ \ ,_\   ____   _  __
                /'_ `\  /'__`\ \ \/ \ \ \/  / __ `\/\`'__\
               /\ \L\ \/\  __/\ \ \_ \ \ \ /\ \L\  \ \ \/
               \ \____ \ \____\\\__\ \ \ \__\ \_____/\ \_\
                \/___L\ \/____/ \/__/  \/__/\/___/  \/_/
                 /\_____/
                 \_/___/

    """
    print("")
    print("@"*100)
    print("@"*100)
    print(header)
    print("@"*100)
    print("")

def print_footer():
    print("")
    print("@"*100)
    print("@"*100)
    print("")

def main():
  parser = argparse.ArgumentParser(
    description="Tool to create the gettor SQLite database."
  )

  parser.add_argument(
    "-f", "--filename", default="gettor.db", metavar="gettor.db",
    help="Database filename."
  )

  args = parser.parse_args()
  abs_filename = os.path.abspath(args.filename)

  webFile = request.urlopen("https://lektor-staging.torproject.org/tpo/staging/projects/torbrowser/RecommendedTBBVersions/")
  versions = webFile.read().decode('utf-8')
  version = versions.split("&#34;")[1]

  gitlab = "https://gitlab.com/hiromipaw/torbrowser/raw/releases/"

  prefixes = {
    "osx": "https://gitlab.com/hiromipaw/torbrowser/raw/releases/TorBrowser-",
    "windows": "https://gitlab.com/hiromipaw/torbrowser/raw/releases/torbrowser-install-",
    "linux": "https://gitlab.com/hiromipaw/torbrowser/raw/releases/tor-browser-linux64-"
  }

  versions = {"windows": version, 'linux': version, 'osx': version}

  suffixes = {
    "osx": "-osx64_en-US.dmg",
    "windows": "_en-US.exe",
    "linux": "_en-US.tar.xz"
  }

  keys = set().union(suffixes, versions, prefixes)
  releases = {k: "".join(dic.get(k, version) for dic in (prefixes, versions, suffixes))  for k in keys}


  if not abs_filename:
      print("Missing database filename.")
  else:
      conn = sqlite3.connect(abs_filename)
      with conn:
          c = conn.cursor()
          """
          Here we drop previous links TABLE but probably it would be better to just update old links to INACTIVE
          """
          c.execute("DROP TABLE IF EXISTS links")
          c.execute(
              "CREATE TABLE links(link TEXT, platform TEXT, arch TEXT,"
              " version TEXT, provider TEXT, status TEXT)"
          )
          for k in keys:
              c.execute(
                  "INSERT INTO links(link, platform, arch, version, provider, status)"
                  "VALUES ('%s', '%s', '64', '%s', 'gitlab', 'ACTIVE')" %(releases.get(k), k, version)
              )


if __name__ == "__main__":
    print_header()
    main()
    print_footer
